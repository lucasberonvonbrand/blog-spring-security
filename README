# 📝 Blog - Spring Security

Proyecto integrador del curso de **Spring Security** de TodoCode Academy. Implementa un blog con gestión de posts, autores y usuarios, utilizando autenticación y autorización robusta con JWT, OAuth2 y roles/permisos.

## 🚀 Componentes principales

- 🟢 **blog-service**: Gestión de posts, autores y usuarios, con roles y permisos.
- 🟢 **security**: Configuración de Spring Security con JWT y OAuth2 mediante GitHub.

## 🧱 Arquitectura general

- ✅ Spring Boot (Java 17)  
- ✅ Spring Security para autenticación y autorización  
- ✅ JWT para sesiones stateless  
- ✅ Roles: `ADMIN`, `USER`, `AUTHOR`  
- ✅ Permisos: `CREATE`, `READ`, `UPDATE`, `DELETE`  
- ✅ OAuth2 con GitHub  
- ✅ Contraseñas cifradas con BCrypt  
- ✅ Endpoints REST: `/api/posts`, `/api/authors`, `/api/users`, `/api/roles`, `/api/permissions`

## ⚙️ Cómo ejecutar el proyecto

### Requisitos

- Java 17  
- Maven 3.9+  
- MySQL  
- Postman (opcional)

### Paso a paso

1️⃣ Clonar el repositorio:  

```bash
git clone https://github.com/lucasberonvonbrand/blog-spring-security.git
cd blog-spring-security
```

2️⃣ Configurar la base de datos MySQL:  

```sql
CREATE DATABASE blog;
mysql -u <usuario> -p blog < ./db/blog-dump.sql
```

3️⃣ Definir variables de entorno:  

`SS_USER`, `SS_PASSWORD`, `BD_URL`, `BD_USER`, `BD_PASSWORD`, `PRIVATE_KEY`, `USER_GENERATOR`, `GITHUB_CLIENT_ID`, `GITHUB_CLIENT_SECRET`

4️⃣ Levantar la aplicación:  

```bash
mvn spring-boot:run
```

## 🔐 Endpoints protegidos

Los siguientes endpoints están protegidos según roles y permisos:  
`/api/posts`, `/api/authors`, `/api/users`, `/api/roles`, `/api/permissions`

## 📬 Colección Postman

- Archivo: `postman/blog-collection.json`  
- Instrucciones: Abrir Postman → Importar archivo → Ejecutar requests

## 🗄️ Base de datos MySQL

- Archivo: `db/blog-dump.sql`  
- Crear base si no existe:  
```sql
CREATE DATABASE IF NOT EXISTS blog;
```
- Importar dump:  
```bash
mysql -u <usuario> -p blog < ./db/blog-dump.sql
```

## 📁 Estructura del proyecto

```
blog-spring-security/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/example/blog/
│   │   │       ├── controller/
│   │   │       │   ├── AuthenticationController.java
│   │   │       │   ├── AuthorController.java
│   │   │       │   ├── PermissionController.java
│   │   │       │   ├── PostController.java
│   │   │       │   ├── RoleController.java
│   │   │       │   └── UserController.java
│   │   │       ├── dto/
│   │   │       │   ├── AuthLoginRequestDTO.java
│   │   │       │   └── AuthLoginResponseDTO.java
│   │   │       ├── model/
│   │   │       │   ├── Author.java
│   │   │       │   ├── Permission.java
│   │   │       │   ├── Post.java
│   │   │       │   ├── Role.java
│   │   │       │   └── UserSec.java
│   │   │       ├── repository/
│   │   │       │   ├── IAuthorRepository.java
│   │   │       │   ├── IPermissionRepository.java
│   │   │       │   ├── IPostRepository.java
│   │   │       │   ├── IRoleRepository.java
│   │   │       │   └── IUserRepository.java
│   │   │       ├── security/
│   │   │       │   ├── config/
│   │   │       │   │   └── SecurityConfig.java
│   │   │       │   └── filter/
│   │   │       │       └── JwtTokenValidator.java
│   │   │       ├── service/
│   │   │       │   ├── AuthorService.java
│   │   │       │   ├── IAuthorService.java
│   │   │       │   ├── IPermissionService.java
│   │   │       │   ├── PermissionService.java
│   │   │       │   ├── IPostService.java
│   │   │       │   ├── PostService.java
│   │   │       │   ├── IRoleService.java
│   │   │       │   ├── RoleService.java
│   │   │       │   ├── IUserService.java
│   │   │       │   ├── UserDetailsServiceImp.java
│   │   │       │   └── UsersService.java
│   │   │       └── utils/
│   │   │           └── JwtUtils.java
│   │   └── resources/
│   │       └── application.properties
│   └── test/
│       └── java/
│           └── com/example/blog/
├── db/
│   └── blog-dump.sql
├── postman/
│   └── blog-collection.json
├── BlogApplication.java
├── pom.xml
├── README.md
└── .gitignore

```

## 👨‍💻 Autor

**Lucas Ruben Beron Von Brand**  
Proyecto realizado como parte del curso **Spring Security** de TodoCode Academy.

